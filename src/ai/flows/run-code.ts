'use server';
/**
 * @fileOverview A code execution simulation flow.
 *
 * - runCode - A function that simulates running code and returns its output.
 * - RunCodeInput - The input type for the runCode function.
 * - RunCodeOutput - The return type for the runCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RunCodeInputSchema = z.object({
  code: z.string().describe('The code to run.'),
  language: z.string().describe('The programming language of the code.'),
  input: z.string().optional().describe('The interactive input provided by the user.'),
  sessionId: z.string().optional().describe('An identifier for the current interactive session.'),
});
export type RunCodeInput = z.infer<typeof RunCodeInputSchema>;

const RunCodeOutputSchema = z.object({
  output: z.string().describe('The output of the code execution.'),
  image: z.string().optional().describe('A data URI of an image generated by the code, if any.'),
  sessionId: z.string().optional().describe('An identifier for the current interactive session if it needs to continue.'),
});
export type RunCodeOutput = z.infer<typeof RunCodeOutputSchema>;

export async function runCode(input: RunCodeInput): Promise<RunCodeOutput> {
  return runCodeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'runCodePrompt',
  input: {schema: RunCodeInputSchema},
  output: {schema: RunCodeOutputSchema},
  prompt: `You are a code execution engine. You will execute the given code and return its output.

Execution must be stateful if a 'sessionId' is provided. If it is a new session, start from the beginning. If it's a continuing session, resume execution.

Handle interactive input as follows:
If the code requires interactive input (e.g., from \`input()\`), do the following:
1.  Stop execution at that point.
2.  Return the prompt message from the input function (e.g., "Enter your name: ") as the 'output'.
3.  Crucially, the output MUST be prefixed with the exact string "[[STDIN_PROMPT]]". For example: "[[STDIN_PROMPT]]Enter your name: ".
4.  Return a 'sessionId' to maintain the state of the execution.

If the user provides input for a continuing session (identified by 'sessionId'), resume execution from where you left off, using the provided 'input' as the value for the interactive prompt.

Plots and Images: If the code generates a plot (e.g., with matplotlib), return a data URI of the image in the 'image' field instead of text output.

Errors: If the code has syntax or runtime errors, return a clear error message as the output.

Language: {{{language}}}
Session ID: {{{sessionId}}}
User Input: {{{input}}}

Code:
\`\`\`{{{language}}}
{{{code}}}
\`\`\`

Execute the code according to the rules above.
`,
});

const runCodeFlow = ai.defineFlow(
  {
    name: 'runCodeFlow',
    inputSchema: RunCodeInputSchema,
    outputSchema: RunCodeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
