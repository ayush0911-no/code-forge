'use server';
/**
 * @fileOverview A code execution simulation flow.
 *
 * - runCode - A function that simulates running code and returns its output.
 * - RunCodeInput - The input type for the runCode function.
 * - RunCodeOutput - The return type for the runCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RunCodeInputSchema = z.object({
  code: z.string().describe('The code to run.'),
  language: z.string().describe('The programming language of the code.'),
  input: z.string().optional().describe('The user input for the current turn.'),
  sessionHistory: z.array(z.string()).optional().describe('The history of the interactive session.'),
});
export type RunCodeInput = z.infer<typeof RunCodeInputSchema>;

const RunCodeOutputSchema = z.object({
  output: z.string().describe('The output of the code execution.'),
  image: z.string().optional().describe('A data URI of an image generated by the code, if any.'),
  isAwaitingInput: z.boolean().optional().describe('Whether the code is waiting for user input.'),
  sessionHistory: z.array(z.string()).optional().describe('The updated history of the interactive session.'),
});
export type RunCodeOutput = z.infer<typeof RunCodeOutputSchema>;

export async function runCode(input: RunCodeInput): Promise<RunCodeOutput> {
  return runCodeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'runCodePrompt',
  input: {schema: RunCodeInputSchema},
  output: {schema: RunCodeOutputSchema},
  prompt: `You are a powerful code execution engine. You will be given a code snippet, its programming language, and optionally, a history of a previous interactive session. Your task is to execute the code and manage the interactive session if needed.

Follow these rules precisely:
1.  **Analyze the Request:** You will receive the code to execute, the language, and optionally, the session history and a new user input.
2.  **Execution Mode:**
    *   **Non-Interactive:** If the code does not require any user input (e.g., no 'input()', 'Scanner', 'cin', etc.), execute it from start to finish. The 'output' field should contain the entire stdout.
    *   **Interactive Session:**
        *   **Start:** If the code requires input and there is no session history, execute the code until it prompts for the first input. The 'output' field should contain everything printed up to that point. Set 'isAwaitingInput' to true.
        *   **Continue:** If there is session history and new user input, resume execution from where it left off. Use the new input as if the user typed it. Execute until the code finishes or asks for the next input.
        *   **End:** When the code finishes, return the final output. Set 'isAwaitingInput' to false.
3.  **Output Formatting:**
    *   Capture and return ALL standard output. Do not summarize or alter it.
    *   If the code expects input, include the prompt message (e.g., "Enter your name: ") in the 'output' field.
4.  **Plots and Images:** If the code generates a plot (e.g., with matplotlib), return a data URI of the image in the 'image' field. The 'output' field should be empty unless there is other text output.
5.  **Errors:** If the code has syntax or runtime errors, return a clear error message in the 'output' field. Do not set 'isAwaitingInput'.
6.  **Session History Management:**
    *   When you pause for input, you must save the entire state of the execution.
    *   Return this state in the 'sessionHistory' output field as an array of strings. This history will be sent back to you on the next turn to resume execution. If there's no history to maintain, return an empty array.

**Language:** {{{language}}}

**Session History (Resume from here if present):**
{{#if sessionHistory}}
  {{#each sessionHistory}}
    {{{this}}}
  {{/each}}
{{else}}
(No previous session)
{{/if}}

**User Input (for this turn):**
{{#if input}}
{{{input}}}
{{else}}
(No input provided for this turn)
{{/if}}

**Code to Execute:**
\`\`\`{{{language}}}
{{{code}}}
\`\`\`

Execute the code according to the rules above.
`,
});

const runCodeFlow = ai.defineFlow(
  {
    name: 'runCodeFlow',
    inputSchema: RunCodeInputSchema,
    outputSchema: RunCodeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

    