'use server';
/**
 * @fileOverview A code execution simulation flow.
 *
 * - runCode - A function that simulates running code and returns its output.
 * - RunCodeInput - The input type for the runCode function.
 * - RunCodeOutput - The return type for the runCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RunCodeInputSchema = z.object({
  code: z.string().describe('The code to run.'),
  language: z.string().describe('The programming language of the code.'),
  input: z.string().optional().describe('The user input to provide to the code.'),
});
export type RunCodeInput = z.infer<typeof RunCodeInputSchema>;

const RunCodeOutputSchema = z.object({
  output: z.string().describe('The output of the code execution.'),
  image: z.string().optional().describe('A data URI of an image generated by the code, if any.'),
  requiresInput: z.boolean().optional().describe('Whether the code is waiting for user input.'),
});
export type RunCodeOutput = z.infer<typeof RunCodeOutputSchema>;

export async function runCode(input: RunCodeInput): Promise<RunCodeOutput> {
  return runCodeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'runCodePrompt',
  input: {schema: RunCodeInputSchema},
  output: {schema: RunCodeOutputSchema},
  prompt: `You are a code execution engine. You will execute the given code and return its output.

If the code requires interactive input (e.g., from Python's 'input()' function):
- If the user has NOT provided input in this turn, stop execution at the input prompt, return the output generated so far, and set 'requiresInput' to true.
- If the user HAS provided input in the 'input' field for this turn, use that input to continue execution.

Plots and Images: If the code generates a plot (e.g., with matplotlib), return a data URI of the image in the 'image' field instead of text output.

Errors: If the code has syntax or runtime errors, return a clear error message as the output.

Language: {{{language}}}
{{#if input}}
User Input provided: {{{input}}}
{{/if}}

Code:
\`\`\`{{{language}}}
{{{code}}}
\`\`\`

Execute the code according to the rules above.
`,
});

const runCodeFlow = ai.defineFlow(
  {
    name: 'runCodeFlow',
    inputSchema: RunCodeInputSchema,
    outputSchema: RunCodeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
