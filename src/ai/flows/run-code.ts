'use server';
/**
 * @fileOverview A code execution simulation flow.
 *
 * - runCode - A function that simulates running code and returns its output.
 * - RunCodeInput - The input type for the runCode function.
 * - RunCodeOutput - The return type for the runCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RunCodeInputSchema = z.object({
  code: z.string().describe('The code to run.'),
  language: z.string().describe('The programming language of the code.'),
});
export type RunCodeInput = z.infer<typeof RunCodeInputSchema>;

const RunCodeOutputSchema = z.object({
  output: z.string().describe('The output of the code execution.'),
  image: z.string().optional().describe('A data URI of an image generated by the code, if any.'),
});
export type RunCodeOutput = z.infer<typeof RunCodeOutputSchema>;

export async function runCode(input: RunCodeInput): Promise<RunCodeOutput> {
  return runCodeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'runCodePrompt',
  input: {schema: RunCodeInputSchema},
  output: {schema: RunCodeOutputSchema},
  prompt: `You are a code execution engine. You will execute the given code and return its output.

Handle interactive input as follows:
1.  **Check for \`__user_input__\`:** Before executing, check if a variable named \`__user_input__\` exists. This variable will be provided by the environment and will contain the user's interactive input as a string.
2.  **Simulate \`input()\`:**
    *   **If \`__user_input__\` is present:** Use its value for the FIRST occurrence of an \`input()\` call (or equivalent for the language) in the code.
    *   **If \`__user_input__\` is NOT present:** When you encounter the first \`input()\` call, STOP execution at that point. Print any output generated so far, and then print the special marker \`<input_prompt>\`. Do not attempt to execute any further code.
3.  **Plots and Images:** If the code generates a plot (e.g., with matplotlib), return a data URI of the image in the 'image' field instead of text output.
4.  **Errors:** If the code has syntax or runtime errors, return a clear error message as the output.

Language: {{{language}}}
Code:
\`\`\`{{{language}}}
{{{code}}}
\`\`\`

Execute the code according to the rules above. Return ONLY the output.
`,
});

const runCodeFlow = ai.defineFlow(
  {
    name: 'runCodeFlow',
    inputSchema: RunCodeInputSchema,
    outputSchema: RunCodeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
